#include <stdio.h>
#include <locale.h>

#define N 9

int encontrarVazio(int grid[N][N], int *linha, int *coluna) {
    for (*linha = 0; *linha < N; (*linha)++)
        for (*coluna = 0; *coluna < N; (*coluna)++)
            if (grid[*linha][*coluna] == 0)
                return 1;
    return 0;
}

int valido(int grid[N][N], int linha, int coluna, int num) {
    for (int x = 0; x < N; x++)
        if (grid[linha][x] == num || grid[x][coluna] == num)
            return 0;

    int startLinha = linha - linha % 3, startColuna = coluna - coluna % 3;
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (grid[i + startLinha][j + startColuna] == num)
                return 0;

    return 1;
}

int resolverSudoku(int grid[N][N]) {
    setlocale(LC_ALL, "Portuguese");
    int linha, coluna;
    if (!encontrarVazio(grid, &linha, &coluna))
        return 1;

    for (int num = 1; num <= 9; num++) {
        if (valido(grid, linha, coluna, num)) {
            grid[linha][coluna] = num;
            if (resolverSudoku(grid))
                return 1;
            grid[linha][coluna] = 0;
        }
    }
    return 0;
}

void printGrid(int grid[N][N]) {
    setlocale(LC_ALL, "Portuguese");
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            printf("%2d ", grid[i][j]);
        printf("\n");
    }
}

int main() {
    setlocale(LC_ALL, "Portuguese");

    int grid[N][N] = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    if (resolverSudoku(grid))
        printGrid(grid);
    else
        printf("Sem solução\n");

    return 0;
}
