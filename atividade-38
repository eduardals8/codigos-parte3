#include <stdio.h>
#include <ctype.h>
#include <locale.h>

#define MAX 100

typedef struct {
    int topo;
    char itens[MAX];
} Pilha;

void inicializar(Pilha *p) {
    p->topo = -1;
}

int estaVazia(Pilha *p) {
    return p->topo == -1;
}

void empilhar(Pilha *p, char valor) {
    p->itens[++(p->topo)] = valor;
}

char desempilhar(Pilha *p) {
    if (!estaVazia(p))
        return p->itens[(p->topo)--];
    return '\0';
}

char topo(Pilha *p) {
    if (!estaVazia(p))
        return p->itens[p->topo];
    return '\0';
}

int precedencia(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

void infixaParaPosfixa(char* exp) {
    setlocale(LC_ALL, "Portuguese");
    Pilha p;
    inicializar(&p);
    char saida[MAX];
    int k = 0;

    for (int i = 0; exp[i]; i++) {
        if (isalnum(exp[i]))
            saida[k++] = exp[i];
        else if (exp[i] == '(')
            empilhar(&p, exp[i]);
        else if (exp[i] == ')') {
            while (!estaVazia(&p) && topo(&p) != '(')
                saida[k++] = desempilhar(&p);
            desempilhar(&p); 
        } else {
            while (!estaVazia(&p) && precedencia(topo(&p)) >= precedencia(exp[i]))
                saida[k++] = desempilhar(&p);
            empilhar(&p, exp[i]);
        }
    }

    while (!estaVazia(&p))
        saida[k++] = desempilhar(&p);

    saida[k] = '\0';
    printf("Expressão Pós-fixa: %s\n", saida);
}

int main() {
    setlocale(LC_ALL, "Portuguese");
    char exp[] = "a+b*(c^d-e)^(f+g*h)-i";
    printf("Expressão Infixa: %s\n", exp);
    infixaParaPosfixa(exp);
    return 0;
}
